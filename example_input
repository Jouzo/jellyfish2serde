export interface CreateLoanScheme {
  minColRatio: number
  interestRate: BigNumber
  id: string
}
export interface UpdateLoanScheme {
  minColRatio: number
  interestRate: BigNumber
  id: string
  activateAfterBlock?: number
}
export interface DestroyLoanScheme {
  id: string
  activateAfterBlock?: number
}
export interface LoanSchemeResult {
  id: string
  mincolratio: BigNumber
  interestrate: BigNumber
  default: boolean
}
export interface SetCollateralToken {
  token: string
  factor: BigNumber
  fixedIntervalPriceId: string
  activateAfterBlock?: number
}
export interface GetLoanSchemeResult {
  id: string
  interestrate: BigNumber
  mincolratio: BigNumber
  default: boolean
}
export interface ListCollateralTokens {
  height?: number
  all?: boolean
}
export interface CollateralTokenDetail {
  token: string
  factor: BigNumber
  fixedIntervalPriceId: string
  activateAfterBlock: BigNumber
  tokenId: string
}
export interface SetLoanToken {
  symbol: string
  name?: string
  fixedIntervalPriceId: string
  mintable?: boolean
  interest?: BigNumber
}
export interface LoanConfig {
  fixedIntervalBlocks: BigNumber
  maxPriceDeviationPct: BigNumber
  minOraclesPerPrice: BigNumber
  scheme: string
}
export interface LoanSummary {
  collateralTokens: BigNumber
  collateralValue: BigNumber
  loanTokens: BigNumber
  loanValue: BigNumber
  openAuctions: BigNumber
  openVaults: BigNumber
  schemes: BigNumber
}
export interface GetLoanInfoResult {
  currentPriceBlock: BigNumber
  nextPriceBlock: BigNumber
  defaults: LoanConfig
  totals: LoanSummary
}
export interface UpdateLoanToken {
  symbol?: string
  name?: string
  fixedIntervalPriceId?: string
  mintable?: boolean
  interest?: BigNumber
}
export interface Interest {
  token: string
  realizedInterestPerBlock: BigNumber
  totalInterest: BigNumber
  interestPerBlock: BigNumber
}
export interface CreateVault {
  ownerAddress: string
  loanSchemeId?: string
}
export interface UpdateVault {
  ownerAddress?: string
  loanSchemeId?: string
}
export interface Vault {
  vaultId: string
  loanSchemeId: string
  ownerAddress: string
  state: VaultState
}
export interface VaultActive extends Vault {
  collateralAmounts: string[]
  loanAmounts: string[]
  interestAmounts: string[]
  collateralValue: BigNumber
  loanValue: BigNumber
  interestValue: BigNumber
  collateralRatio: number
  informativeRatio: BigNumber
}
export interface VaultLiquidation extends Vault {
  liquidationHeight: number
  liquidationPenalty: number
  batchCount: number
  batches: VaultLiquidationBatch[]
}
export interface UTXO {
  txid: string
  vout: number
}
export interface DepositVault {
  vaultId: string
  from: string
  amount: string // amount@symbol
}
export interface WithdrawVault {
  vaultId: string
  to: string
  amount: string // amount@symbol
}
export interface PaybackLoanMetadataV2 {
  vaultId: string
  from: string
  loans: TokenPaybackAmount[]
}
export interface VaultPagination {
  start?: string
  including_start?: boolean
  limit?: number
}
export interface ListVaultOptions {
  ownerAddress?: string
  loanSchemeId?: string
  state?: VaultState
  verbose?: boolean
}
export interface CloseVault {
  vaultId: string
  to: string
}
export interface PlaceAuctionBid {
  vaultId: string
  index: number
  from: string
  amount: string // amount@symbol
}
export interface AuctionPagination {
  start?: AuctionPaginationStart
  including_start?: boolean
  limit?: number
}
export interface AuctionPaginationStart {
  vaultId?: string
  height?: number
}
export interface VaultLiquidationBatch {
  index: number
  collaterals: string[]
  loan: string
  highestBid?: HighestBid
}
export interface HighestBid {
  amount: string // amount@symbol
  owner: string
}
export interface ListAuctionHistoryPagination {
  maxBlockHeight?: number
  vaultId?: string
  index?: number
  limit?: number
}
export interface ListAuctionHistoryDetail {
  winner: string
  blockHeight: number
  blockHash: string
  blockTime: number
  vaultId: string
  batchIndex: number
  auctionBid: string
  auctionWon: string[]
}
